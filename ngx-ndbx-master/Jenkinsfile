def shared

// number of build results and days to keep has to be defined in jenkinsfile
// for multibranch pipelines
// Lesson learned: if you run a properties() block later again all former properties
// get overridden!!!!! so be careful all properties should be set in here
properties([
  buildDiscarder([$class: 'EnhancedOldBuildDiscarder', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', discardOnlyOnSuccess: false, numToKeepStr: '3']),
  parameters([
    booleanParam(name: 'forceDeploy', defaultValue: false, description: 'Force deployment of documentation')
  ])
])

node('nodejs-with-browsers') {
  checkout scm

  shared = load 'ci/shared.groovy'

  // change git config so we can lsit refs and push tags
  shared.gitAuthenticate()

  branch = env.BRANCH_NAME
  isReleaseBranch = branch ==~ shared.RELEASE_BRANCHES
  isPR = shared.isPullRequest()
  tagIntermediate = shared.getIntermediateGitTag()
  packageVersion = shared.getVersionFromPackage('./packages/ngx-ndbx/src/package.json')
  tagName = "v${packageVersion}"
  isNewVersion = shared.isTagAvailable(tagName)

  // appName gets used for building and deploying the documentation
  // with the correct base-href
  appName = shared.getAppName(branch, tagName)
  // if it's not a release we build for staging
  if (isPR || !isNewVersion || !appName) {
    appName = 'ngx-ndbx-staging'
  }

  stage("Prepare") {
    shared.withNotification('ci/install', "NPM Install") {
      sh 'npm -v'
      sh 'node -v'
      sh "http_proxy=''"
      sh 'npm config set fetch-retries 3'
      sh 'npm config set fetch-retry-mintimeout 15000'
      sh 'npm config set fetch-retry-maxtimeout 90000'
      sh """
      sed -i 's#registry=.*#registry=${env.NEXUS_URL}/repository/npm-all/#g' .npmrc
      sed -i '/registry=.*/ a strict-ssl=false' .npmrc
      """
      sh 'npm ci'
    }
  }

  stage("Lint") {
    shared.withNotification('ci/test/lint', "Linter") {
      echo 'Running Linter'
      sh 'npm run lint'
    }
  }

  stage("Test Docs-ui") {
    shared.withNotification('ci/test/unit/ngx-docs-ui', "Unit Test docs-ui") {
      echo 'Running Unit Tests'

      sh 'COMPACT_TEST_RESULTS=true npm run test -- ngx-docs-ui --watch=false --code-coverage'
      /*
        The unit test will generate some report files
        which we want to save in the jenkins job (junit log & coverage)
      */
      junit 'karma-test-results/ngx-docs-ui/*.xml'
      publishHTML target: [
          allowMissing: false,
          alwaysLinkToLastBuild: false,
          keepAll: true,
          reportDir: 'packages/ngx-docs-ui/coverage',
          reportFiles: 'index.html',
          reportName: 'Coverage Report ngx-docs-ui (Istanbul)'
        ]
    }
  }

  stage ("View Engine Tests Library") {
    shared.withNotification('ci/test/unit/ndbx', "VE Test library") {
      echo 'Testing ngx-ndbx with view engine'

      sh 'COMPACT_TEST_RESULTS=true npm run test:lib -- --watch=false'
    }
  }

  stage ("View Engine Build NDBX") {
    shared.withNotification('ci/build/ndbx/ve', "VE Build library") {
      sh "npm run build:lib"
    }
  }

  stage ("Build docs-ui") {
    shared.withNotification('ci/build/ndbx/ve', "VE Test docs-ui") {
      sh "npm run build:docs-ui"
    }
  }

  // Only run this after ngx-ndbx and ngx-docs-ui were built
  stage("Integration") {
    echo "Running integration builds"

    shared.withNotification('ci/test/smoketest', "Smoke test of new docs") {
      echo "Run documentation build"
      sh "npm run build:docs -- --no-progress"
    }
  }

  // Got disconnected errors again move NDBX tests to separate stage
  stage("Ivy Test Library") {
    shared.withNotification('ci/test/unit/ndbx', "Unit Test NDBX") {
      echo 'Running Unit Tests'

      sh 'COMPACT_TEST_RESULTS=true npm run test:lib:ivy -- --watch=false --code-coverage'
        /*
          The unit test will generate some report files
          which we want to save in the jenkins job (junit log & coverage)
        */
      junit 'karma-test-results/ngx-ndbx/*.xml'
      publishHTML target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'packages/ngx-ndbx/coverage',
        reportFiles: 'index.html',
        reportName: 'Coverage Report NDBX (Istanbul)'
      ]
    }
  }

  /*
    Important:
    we have to build everything in the right order for the integration and deployment to work.
    Ngx-docs-ui can only build from the artifact of ngx-ndbx and not from sources (ng-packagr would throw errors)
    And finally an integrated aot build of the documentation needs both ngx-ndbx and ngx-docs-ui
    Order:
    1) ngx-ndbx
    2) ngx-docs-ui
    3) documentation
  */
   stage("Ivy Build Library") {
    // For the integration tests we need to build the library first
    // Also the documentation needs to be aware of the deployment target
    // so we can't build it in parallel here.
    shared.withNotification('ci/build/library', "Build Library") {
      echo 'Building Library' // --> dist/ngx-ndbx
      sh 'npm run build:lib:ivy'
    }
  }

  // Builds docs-ui again against the ivy artifact of the library
  stage("Ivy Build docs-ui") {
    shared.withNotification('ci/build/docs-ui', "Build docs-ui") {
      echo 'Building docs-ui' // --> dist/ngx-ndbx
      sh "npm run build:docs-ui"
    }
  }

  // build against the ivy artifacts
  stage("Ivy build documentation") {
    shared.withNotification('ci/build/documentation', "Build Documentation") {
      echo "Building docs with appName `${appName}`"
      shared.buildDocumentation([ appName: appName, path: 'dist/documentation'])
    }
  }

  stage("Deploy to staging") {
    if (branch != 'master') {
      echo "Not on master skipping"
      return;
    }

    // in case anything goes wrong before we make sure that we only deploy to staging here
    // worst case is that staging doesn't work anymore
    appName = 'ngx-ndbx-staging'

    if (isNewVersion) {
      echo "New version found not deploying to staging"
      return;
    }

    shared.withNotification('ci/deploy/documentation', "Deploy Documentation") {
      echo "Running documentation build"
      shared.deployDocumentation([ appName: appName, path: 'dist/documentation' ])
    }
  }

  stage("Manual deploy") {
    if (params.forceDeploy == false ) {
      echo "Nothing to do, skipping"
      return
    }

    if (!isReleaseBranch) {
      echo "${branch} is not a release branch, ignoring force deploy."
      return
    }

    echo "Force deploying branch ${branch} to appname ${appName}"
    shared.deployDocumentation([ appName: appName, path: 'dist/documentation' ])
  }


  stage("Release") {
    echo "Release Probing..."
    echo "isReleaseBranch: `${isReleaseBranch}`, isPR: `${isPR}`, isNewVersion: `${isNewVersion}`, branch: `${branch}`, tagName: `${tagName}`"

    if (!isReleaseBranch || !isNewVersion || isPR) {
      echo "Nothing to release"
      return
    }

    shared.withNotification('ci/publish/rebuild', "Deploy Documentation") {
      echo "Rebuilding library to get rid of ngcc files"
      sh 'npm run clean:lib'
      sh 'npm run build:lib'
    }

    if (branch == 'master') {
      // This is our main release branch for next (beta, alpha) and new stable releases
      switch(tagName) {
        case ~TAG_STABLE_FORMAT:
          echo "Found a stable release in ${branch} with tag ${tagName}"

          shared.publish([ channel: 'latest', path: 'dist/ngx-ndbx' ])
          shared.createGitTag(tagName)
          shared.deployDocumentation([ appName:'ngx-ndbx-dev', path: 'dist/documentation' ])
          break;
        case ~TAG_BETA_FORMAT:
          echo "Found a beta release in ${branch} with tag ${tagName}"

          shared.publish([ channel: 'next', path: 'dist/ngx-ndbx' ])
          shared.createGitTag(tagName)
          shared.deployDocumentation([ appName:'ngx-ndbx-next', path: 'dist/documentation' ])
          break;

        default:
          echo "Couldn't match tag ${tagName} with any known pattern. Aborted."
      }

    } else if (branch == ~LTS_FORMAT) {
      shared.publish([ channel: 'latest', path: 'dist/ngx-ndbx' ])
      shared.createGitTag(tagName)
      shared.deployDocumentation([ appName:'ngx-ndbx-lts', path: 'dist/documentation' ])
    } else {
      echo "Branch `${branch}` received a new release version (${tagName}) but it's not a release branch. Ignoring";
    }
  }
}


